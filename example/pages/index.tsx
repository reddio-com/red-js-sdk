import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import {Button, Text, Spacer} from '@nextui-org/react';
import styles from '../styles/Home.module.css'
import {ethers} from "ethers";
import { useState, useEffect } from "react";
import {reddio} from "../utils/config";
import Layout from '../components/layout';

const Home: NextPage = () => {
  const [account, setAccount] = useState('');
  const [keys, setKeys] = useState({
    privateKey: '',
    publicKey: '',
  });

  useEffect(() => {
    getAccount()
  })

  const getAccount = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = await provider.getSigner();
      const account = await signer.getAddress();
      setAccount(account)
    } catch (e) {
      console.log(e);
    }
  }

  const connect = async () => {
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    await provider.send('eth_requestAccounts', [])
    getAccount()
  }

  const generate = async () => {
    const msgParams = JSON.stringify({
      domain: {
        // Defining the chain aka Rinkeby testnet or Ethereum Main Net
        chainId: 5,
        // Give a user friendly name to the specific contract you are signing for.
        name: "Ether Mail",
        // If name isn't enough add verifying contract to make sure you are establishing contracts with the proper entity
        verifyingContract: "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC",
        // Just let's you know the latest version. Definitely make sure the field name is correct.
        version: "1",
      },

      // Defining the message signing data content.
      message: {
        /*
         - Anything you want. Just a JSON Blob that encodes the data you want to send
         - No required fields
         - This is DApp Specific
         - Be as explicit as possible when building out the message schema.
        */
        contents: "Hello, Bob!",
        attachedMoneyInEth: 4.2,
        from: {
          name: "Cow",
          wallets: [
            "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826",
            "0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF",
          ],
        },
        to: [
          {
            name: "Bob",
            wallets: [
              "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB",
              "0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57",
              "0xB0B0b0b0b0b0B000000000000000000000000000",
            ],
          },
        ],
      },
      // Refers to the keys of the *types* object below.
      primaryType: "Mail",
      types: {
        // TODO: Clarify if EIP712Domain refers to the domain the contract is hosted on
        EIP712Domain: [
          { name: "name", type: "string" },
          { name: "version", type: "string" },
          { name: "chainId", type: "uint256" },
          { name: "verifyingContract", type: "address" },
        ],
        // Not an EIP712Domain definition
        Group: [
          { name: "name", type: "string" },
          { name: "members", type: "Person[]" },
        ],
        // Refer to PrimaryType
        Mail: [
          { name: "from", type: "Person" },
          { name: "to", type: "Person[]" },
          { name: "contents", type: "string" },
        ],
        // Not an EIP712Domain definition
        Person: [
          { name: "name", type: "string" },
          { name: "wallets", type: "address[]" },
        ],
      },
    });
    const res = await reddio.keypair.generateFromEthSignature(msgParams)
    setKeys(res)
  }

  return (
      <Layout>
        <div className={styles.container}>
          <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <main className={styles.main}>
            <h1 className={styles.title}>
              Welcome to SDK Examples!
            </h1>

            <Text>将私钥「90bd2cc1472d255677a10b98234692c7210ffaaf56feaea99e3fe7b4fa4291f0」导入钱包</Text>
            <Spacer y={1} />
            { account ? <Button disabled>{account}</Button> : <Button onPress={connect}>connect</Button> }
            <Spacer y={1} />
            <Button onClick={generate}>获取 starkKey</Button>
            <Spacer y={1} />
            <Text>stark key: {keys.publicKey}</Text>
            <Spacer y={1} />

            <div className={styles.grid}>
              <Link href="/process1">
                <a className={styles.card}>
                  <h2>流程 1 &rarr;</h2>
                  <p>Deposit/Transfer/Withdraw ETH between L1 and L2.</p>
                </a>
              </Link>

              <Link href="/process2">
                <a className={styles.card}>
                  <h2>流程 2 &rarr;</h2>
                  <p>Deposit/Transfer/Withdraw ERC20 between L1 and L2.</p>
                </a>
              </Link>

              <Link href="/process3">
                <a className={styles.card}>
                  <h2>流程 3 &rarr;</h2>
                  <p>Deposit/Transfer/Withdraw ERC721 between L1 and L2.</p>
                </a>
              </Link>
            </div>
          </main>
        </div>
      </Layout>

  )
}

export default Home
